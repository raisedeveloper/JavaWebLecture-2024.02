--1교시--
list 
- get, post (both of them) 포함

insert
update
- get, post (both of them) 포함

삭제하시겠습니까?
or modal or alert 사용

MVC
Controller 요청받고
Model 이 DB에 주고
V 사용자에게 보여줌

EL
JSTL 
두 가지는 현대 사회 viewer의 모습이 갖춰짐
formating String 연산 함수 사용하는 것 모두 다른 템플릿 엔진에서도 제공을 하는 것임 == 보고 배워서 쓰면 됨
Ex> 웹 페이지 1~2개는 책 보고 만들고, 5개는 참조해서 만들고
나머지 25개는 배운 것을 가지고 생성 가능 (아주 특별한 기능 나왔을 때 확인)

JSP기능 == 위와 같은 3가지 기능을 동시에 할 수 있음
15년~20년 전 초창기 때는 controller DB 등 모든 것을 다 한 곳에 담았으나 
문제점 : 
Spagetti of Bowl == 유지 보수 어려움(이 있음)

jsp 개발이 spring boots 로 옮김 == jsp 사용을 권장하지 않음

권장 템플릿 엔진 4개가 있는데 jsp는 old fashioned 입니다.
viewer 엔진은 대부분 비슷합니다.
jsp 는 적당히 사용할 것
1. 조건문 - 3항 연산자 (html 에서 아주 많이 쓰임 : selected 붙여주고 나머지는 붙이지 않을 때) 
== react 사용 시 많이 사용됨 자바 스크립트에서도 그대로 지원하기 때문임
2. 반복문 - 반복문을 안쓰면 html 1만 라인을 넘게 된다. 크롤링이 가능해진다. reverse engine 이용을 용이하게 함

<td><a href="/jw/ch07/kpop/updateArtist?aid=${kpop.aid}">${kpop.name}</a></td> 화면과 공유한다는 것 (굿)

 foreach indentation을 맞춰줘야 함
html code를 space source 보기를 했을 떄 웹 화면에서 F12 를 보면...
insert controller
viewer insert artist
코드가 어려운 것이 아니라 주소와 틀을 잘 만들어주면됨
업데이트할 때는 hidden 태그를 꼭 써야함

update 할 때 
id 값을 가지고 정보를 내려보내
update 같은 
20240219
jsp는 spring에서 사용하지 않음

linux
Logging -> 화면, 파일

5가지 level  
ERROR      log.errer("", 변수);
WARNING      log.warning("", 변수);
INFO      log.info("", 변수);
DEBUG      log.debug("", 변수);
TRACE      log.trace("", 변수);

쿠키와 세션


JSP Server Level - 작은 단위부터 찾아서 올라감. - page - request - session - application
1. Application - 하나의 웹 어플리케이션. 모든 유저, 페이지, 페이지 요청, 세션에 공유될 수 있음
2. Session - 하나의 브라우저. 브라우저 내에서만 정보를 공유함. 세션은 접속자에 따라 다르지만, 접속 하고 있는동안에는 내 정보를 활용할 수 있다 - 자동 로그인, 시청 기록 등
3. Request - 하나의 http 요청 정보. client로부터 오는 한 번의 요청과 관련된 영역. 브라우저가 결과를 받으면 요청했던 request객체는 사라짐. (requestParameter)
4. Page - 하나의 Jsp페이지로. 한 페이지에서 다른 페이지의 정보 사용 불가. - jsp파일의 맨위에 선언하여 사용함. - rd&forward 등으로 다른 페이지와 연결

Client Level
Cookie - 웹브라우저가 보관하는 데이터. 웹 서버에서도 생성가능 (=jsp에서 생성하는 쿠키). 로딩을 빠르게 해주기 위해 미리 받아오는 데이터 개념
브라우저에서 F12 - Application - Cookies로 확인 가능
1) 웹 서버는 쿠키를 이용해 웹 브라우저에 정보를 전송함
2) 웹 서버로부터 쿠키 전달받은 웹 브라우저는 이후 웹 서버에 요청 보낼때 쿠키를 함께 전송.
3) 웹 서버는 브라우저가 전송한 쿠키를 사용해 필요한 정보를 읽음.
+ 브라우저가 다를 경우 쿠키가 생성되지 않아 정보를 받아올 수 없음.
+ setSession을 한 브라우저에서는 getSession을 진행하면 두 페이지의 쿠키 값이 동일함.
+ 세션을 활용하면 로그인 전에는 로그인 버튼이, 로그인 한 후에는 로그아웃버튼이 활성화 되는 것을 확인할 수 있다.



